buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.github.spotbugs:gradlePlugin:1.4"
  }
}

allprojects {
    
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'java'
    apply plugin: "com.github.spotbugs"
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    group = 'com.dua3.meja'

    repositories {
        mavenLocal()
        jcenter()
        // integration for dependencies on github
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        def poiVersion = "3.17"
        compile "org.apache.poi:poi:${poiVersion}"
        compile "org.apache.poi:poi-ooxml:${poiVersion}"
        compile "org.apache.poi:poi-ooxml-schemas:${poiVersion}"

        // use local project if 'localBuild' was set
        def utilityVersion = "0.2"
        if (project.hasProperty('localBuild')) {
            compile 'com.dua3.utility:utility:+'
        } else {
            compile "com.github.xzel23:utility:${utilityVersion}"
        }
		
		// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
        def sl4jVersion = "1.7.25"
		compile "org.slf4j:slf4j-api:${sl4jVersion}"
		testRuntime "org.slf4j:slf4j-simple:${sl4jVersion}"
		
        testCompile "junit:junit:4.12"
    }

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled false
            html.enabled true
        }

        spotbugs {
            effort = "max"
            reportLevel = "high"
        }
    }

    tasks.withType(JacocoReport) {
        reports {
            xml.enabled false
            csv.enabled false
            html.enabled true
        }
    }
}

subprojects {
    dependencies {
        compile rootProject
    }    
}

project(':meja-ui-jfx') {
    dependencies {
        compile project(':meja-ui')
    }
}

project(':meja-ui-swing') {
    dependencies {
        compile project(':meja-ui')
    }
}

project(':meja-samples') {
    dependencies {
        compile project(':meja-ui-swing')
        compile project(':meja-ui-jfx')
    }
}

// create a jar with the dependencies
task depJar(type: Jar, dependsOn: subprojects.tasks['classes']) {
    baseName = 'meja'
    classifier = 'dependencies'
    
    from rootProject.configurations.compile.collect { 
        it.isDirectory() ? it : zipTree(it) 
    }
}

// create a jar with sources
task srcJar(type: Jar, dependsOn: subprojects.tasks['classes']) {
    baseName = 'meja'
    classifier = 'sources'
    
    from rootProject.sourceSets.main.java.srcDirs
        
    subprojects.each { project ->
        from project.sourceSets.main.java.srcDirs
    }
}

// create a jar with javadoc
task docJar(type: Jar, dependsOn: javadoc) {
    baseName = 'meja'    
    classifier = 'javadoc'

    from file("$buildDir/docs/javadoc")    
}

// collect all javadoc documentation in one location
task alljavadoc(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
    destinationDir = file("$buildDir/docs/javadoc")
    title = "$project.name $version API"
    options.author true
    
    allprojects.each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}

// create a jar with classes from all subprojects
task allJar(type: Jar, dependsOn: [subprojects.tasks['classes'], alljavadoc]) {
    baseName = 'meja'
    classifier = 'all'
    
    from rootProject.sourceSets.main.output
    from rootProject.sourceSets.main.java.srcDirs
    
    subprojects.each { project ->
        // classes
        from project.sourceSets.main.output
        // sources
        from project.sourceSets.main.java.srcDirs
    }
    // javadoc
    from file("$buildDir/docs/javadoc")    
}

task dist(dependsOn: [depJar, srcJar, docJar, allJar]) {
    println "creating distribution files"
}

defaultTasks 'build', 'publishToMavenLocal', 'install'
