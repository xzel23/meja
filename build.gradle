subprojects {
    apply plugin: 'java'
    group = 'com.dua3.meja'

    repositories {
        mavenCentral()
    }

    dependencies {
		def poiVersion = "3.15"
		compile "org.apache.poi:poi:${poiVersion}"
		compile "org.apache.poi:poi-ooxml:${poiVersion}"
		compile "org.apache.poi:poi-ooxml-schemas:${poiVersion}"
		
        testCompile "junit:junit:4.12"
    }
}

allprojects {
    tasks.withType(Jar) {
        destinationDir = file("$rootDir/dist")
    }

    tasks.withType(Javadoc) {
        destinationDir = file("$rootDir/doc")
    }
}

project(':meja') {
}

project(':meja-ui-swing') {
    dependencies {
        compile project(':meja')
    }
}

project(':meja-ui-jfx') {
    dependencies {
        compile project(':meja')
    }
}

project(':meja-samples') {
    dependencies {
        compile project(':meja')
        compile project(':meja-ui-swing')
        compile project(':meja-ui-jfx')
    }
}

// create javadoc
task javadoc(type: Javadoc) {
    source subprojects.collect {project -> project.sourceSets.main.allJava } 
    classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath}) 
}

// create a jar with the dependencies
task depJar(type: Jar, dependsOn: subprojects.tasks['classes']) {
    baseName = 'meja'
    classifier = 'dependencies'
    
    from project(':meja').configurations.compile.collect { 
		it.isDirectory() ? it : zipTree(it) 
    }
}

// create a jar with sources
task srcJar(type: Jar, dependsOn: subprojects.tasks['classes']) {
    baseName = 'meja'
    classifier = 'sources'
    
    subprojects.each { project ->
        from project.sourceSets.main.java.srcDirs
    }
}

// create a jar with javadoc
task docJar(type: Jar, dependsOn: javadoc) {
    baseName = 'meja'    
    classifier = 'javadoc'

    from file("$rootDir/doc")    
}

// create a jar with classes from all subprojects
task allJar(type: Jar, dependsOn: subprojects.tasks['classes']) {
    baseName = 'meja'
    classifier = 'all'
    
    subprojects.each { project ->
        // classes
        from project.sourceSets.main.output
        // sources
        from project.sourceSets.main.java.srcDirs
        // javadoc
        from file("$rootDir/doc")    
    }
}

task dist(dependsOn: [depJar, srcJar, docJar, allJar]) {
    println "creating distribution files"
}
