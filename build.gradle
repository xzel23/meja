buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.github.spotbugs:gradlePlugin:1.6.0"
  }
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'com.github.spotbugs'
apply plugin: 'jacoco'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.dua3.meja'

repositories {
    mavenLocal()
    
    jcenter()
    // integration for dependencies on github
    maven { url 'https://jitpack.io' }
}

sourceSets {
	main {
		java.srcDirs 'src/main/java'
	}

	swing {
		java.srcDirs 'src/swing/java'
	}
	
	samples {
		java.srcDirs 'src/samples/java'
	}
}

dependencies {
    def poiVersion = "3.17"
    compile "org.apache.poi:poi:${poiVersion}"
    compile "org.apache.poi:poi-ooxml:${poiVersion}"
    compile "org.apache.poi:poi-ooxml-schemas:${poiVersion}"

    // use local project if 'localBuild' was set
    def utilityVersion = "f68d50ebb75dba7bef65e087714c746b5ddf5061"
    if (project.hasProperty('localBuild')) {
        compile 'com.dua3.utility:utility:+'
        swingCompile 'com.dua3.utility:utility:+'
        samplesCompile 'com.dua3.utility:utility:+'
    } else {
        compile "com.github.xzel23:utility:${utilityVersion}"
        swingCompile "com.github.xzel23:utility:${utilityVersion}"
        samplesCompile "com.github.xzel23:utility:${utilityVersion}"
    }
	
    // Log4j2
    compile        group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
    testRuntime    group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
    samplesRuntime group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
	
    testCompile "junit:junit:4.12"

  	swingCompile sourceSets.main.output
  	samplesCompile sourceSets.main.output, sourceSets.swing.output
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

spotbugs {
    excludeFilter = file("$rootProject.projectDir/config/spotbugs-exclude.xml")
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(JacocoReport) {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

// create a jar with the dependencies
task depJar(type: Jar, dependsOn: tasks['classes']) {
    baseName = 'meja'
    classifier = 'dependencies'
    
    from rootProject.configurations.compile.collect { 
        it.isDirectory() ? it : zipTree(it) 
    }
}

// create a jar with classes from all subprojects
task allJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.output
    from sourceSets.swing.output
    
    from sourceSets.main.allJava
    from sourceSets.swing.allJava

    // javadoc
    from javadoc.destinationDir
}

task coreJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.output
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task swingJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.output
    from sourceSets.swing.output
}

publishing {

    publications {

        mavenJava(MavenPublication) {

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'meja'
                    description 'spreadsheet library'
                    url 'https://github.com/xzel23/meja'
                    scm {
                        url 'https://github.com/xzel23/meja.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'xzel23'
                            name 'Axel Howind'
                            email 'axel@dua3.com'
                        }
                    }
                }
            }
            
            artifact allJar {
            }
            
            artifact coreJar {
                classifier "core"
            }
        
            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }
            
            artifact swingJar {
                classifier 'swing'
            }
        }
    }
}

defaultTasks 'build', 'publishToMavenLocal'
