// Copyright 2019 Axel Howind
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

plugins {
  id 'com.dua3.gradle.jpms' version '0.8.2' apply false
  id 'com.github.spotbugs'  version '1.6.9' apply false
  id 'com.jfrog.bintray'    version '1.8.4' apply false
}

subprojects {

  apply plugin:  'java'
  apply plugin:  'java-library'
  apply plugin:  'maven-publish'
  apply plugin:  'eclipse'
  apply plugin:  'com.github.spotbugs'
  apply plugin:  'com.dua3.gradle.jpms'
  apply plugin:  'com.jfrog.bintray'

  /////////////////////////////////////////////////////////////////////////////
	group              = 'com.dua3.meja'
	version            = '2.0-BETA2'
		
	ext.moduleName     = project.group 
	ext.scm            = 'https://gitlab.com/com.dua3/lib/meja.git'
	ext.repo           = 'public'
	ext.description    = 'The Meja Spreadsheet Library'
		
	ext.developerId    = 'axh'
	ext.developerName  = 'Axel Howind'
	ext.developerEmail = 'axel@dua3.com'
  ////////////////////////////////////////////////////////////////////////////


  // repositories
  repositories {
    jcenter()
    mavenLocal()
  }

  // library versions
  def currentOS = org.gradle.internal.os.OperatingSystem.current()
  ext {
	dua3UtilityVersion = '3.1.4'
    dua3FxVersion = '0.3.4'
    javafxversion = '11.0.2'
    junitVersion = '5.3.1'

    if (currentOS.isWindows()) {
      platform = 'win'
    } else if (currentOS.isLinux()) {
      platform = 'linux'
    } else if (currentOS.isMacOsX()) {
      platform = 'mac'
    }
  }

  // dependencies
  dependencies {
    implementation "com.dua3.utility:utility:${dua3UtilityVersion}"

    // JUnit
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
  }

  // remove module-info.java from eclipse source folder
  eclipse.classpath.file.whenMerged {
    for (item in entries.findAll{ it.path.matches('src/.*/java') }) {
      item.excludes += 'module-info.java'
    }
  }

  test {
    useJUnitPlatform()

    filter {
        exclude '**/module-info.class'
    }
  }

  javadoc {
    doFirst {
        options.addStringOption('-module-path', classpath.asPath)
    }
  }

  sourceCompatibility = 11
  targetCompatibility = 11

  compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
  }

  // === BINTRAY === >

  bintray {
    user = findProperty('BINTRAY_USER') ?: 'NONE'
    key = findProperty('BINTRAY_KEY') ?: 'NONE'

    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload    
    override = true //[Default: false] Whether to override version artifacts already published    

    publications = ['projectPublication']

    pkg {
        repo = project.repo
        name = project.group
        userOrg = findProperty('BINTRAY_USER_ORG') ?: 'NONE'
        licenses = ['Apache-2.0']
        vcsUrl = project.scm

	    version {
	        name = project.version
	        desc = project.name+version
	        released  = new Date()
	        vcsTag = project.version
	    }
    }
  }

  // === ARTIFACTS === >

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
	archives jar
    archives sourcesJar
    archives javadocJar
  }

  // === MAVEN publication === >

  // Create the pom configuration:
  def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        }
    }
    developers {
        developer {
            id    project.developerId
            name  project.developerName
            email project.developerEmail
        }
    }
    
    scm {
       url project.scm
    }
  }

  // Create the publication with the pom configuration:
  publishing {
    publications {
        projectPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.description)
                root.appendNode('name', project.group)
                root.appendNode('url', project.scm)
                root.children().last() + pomConfig
            }
        }
    }
  }

// === SPOTBUGS === >

  spotbugs.toolVersion = '3.1.11'
  spotbugs.excludeFilter = rootProject.file('spotbugs-exclude.xml')
    
  tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
      xml.enabled false
      html.enabled true        
    }
  }

}

// === DEFAULT TASKS === >
defaultTasks 'build', 'publishToMavenLocal'
