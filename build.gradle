// Copyright 2019 Axel Howind
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

plugins {
    id 'com.dua3.gradle.jpms' version '1.0-BETA5' apply false
    id 'com.adarshr.test-logger' version '1.7.0' apply false
    id 'com.github.spotbugs' version '1.6.10' apply false
    id 'com.jfrog.bintray' version '1.8.4' apply false
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'com.dua3.gradle.jpms'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'com.jfrog.bintray'

    /////////////////////////////////////////////////////////////////////////////
    group = 'com.dua3.meja'
    version = '2.0-BETA17'

    ext.moduleName = project.group
    ext.scm = 'https://gitlab.com/com.dua3/lib/meja.git'
    ext.repo = 'public'
    ext.description = 'The Meja Spreadsheet Library'

    ext.developerId = 'axh'
    ext.developerName = 'Axel Howind'
    ext.developerEmail = 'axel@dua3.com'
    ////////////////////////////////////////////////////////////////////////////

    ext {
        java_version='11'
        javafx_version='13'
        junit_version='5.5.1'

        dua3_utility_version = '5-BETA5'
    }

    sourceCompatibility = java_version
    targetCompatibility = java_version

    // repositories
    repositories {
        jcenter()

        // no dependencies on local versions in release
        if (!project.hasProperty('release')) {
            mavenLocal()
        }
    }

    // get OS (because JavaFX packages are OS dependent)
    def currentOS = org.gradle.internal.os.OperatingSystem.current()
    if (currentOS.isWindows()) {
        ext.platform = 'win'
    } else if (currentOS.isLinux()) {
        ext.platform = 'linux'
    } else if (currentOS.isMacOsX()) {
        ext.platform = 'mac'
    }

    // dependencies
    dependencies {
        // com.dua3 libraries
        implementation "com.dua3.utility:utility:${dua3_utility_version}"

        // JUnit
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    }

    test {
        useJUnitPlatform()
    }

    testlogger {
        theme 'standard-parallel'
    }

    javadoc {
        options.encoding = 'UTF-8'
        doFirst {
            options.addStringOption('-module-path', classpath.asPath)
        }
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    // === BINTRAY === >

    bintray {
        user = findProperty('BINTRAY_USER') ?: 'NONE'
        key = findProperty('BINTRAY_KEY') ?: 'NONE'

        dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
        publish = true //[Default: false] Whether version should be auto published after an upload
        override = true //[Default: false] Whether to override version artifacts already published

        publications = ['projectPublication']

        pkg {
            repo = project.repo
            name = project.group
            userOrg = findProperty('BINTRAY_USER_ORG') ?: 'NONE'
            licenses = ['Apache-2.0']
            vcsUrl = project.scm

            version {
                name = project.version
                desc = project.name + version
                released = new Date()
                vcsTag = project.version
            }
        }
    }

    // === ARTIFACTS === >

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    // === MAVEN publication === >

    // Create the pom configuration:
    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            }
        }
        developers {
            developer {
                id project.developerId
                name project.developerName
                email project.developerEmail
            }
        }

        scm {
            url project.scm
        }
    }

    // Create the publication with the pom configuration:
    publishing {
        publications {
            projectPublication(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId project.group
                artifactId project.name
                version version
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', project.description)
                    root.appendNode('name', project.group)
                    root.appendNode('url', project.scm)
                    root.children().last() + pomConfig
                }
            }
        }
    }

// === SPOTBUGS === >grtadlew

    spotbugs.toolVersion = '4.0.0-beta4'
    spotbugs.excludeFilter = rootProject.file('spotbugs-exclude.xml')

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

}

// === DEFAULT TASKS === >
defaultTasks 'build', 'publishToMavenLocal'
