name: CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Setup JDK 21 for build
      - name: 'Set up JDK 21'
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      # Extract Gradle version from wrapper properties for cache key
      - name: 'Extract Gradle Version'
        id: gradle-version
        run: |
          GRADLE_VERSION=$(sed -n -e 's!.*gradle-!!' -e 's!-bin.zip!!p' < gradle/wrapper/gradle-wrapper.properties)
          echo "Detected Gradle version: $GRADLE_VERSION"
          echo "gradle_version=$GRADLE_VERSION" >> "$GITHUB_OUTPUT"
          # Create a file with the Gradle version for other jobs to use
          mkdir -p build/gradle-version
          echo "$GRADLE_VERSION" > build/gradle-version/version.txt

      - name: 'Setup Gradle'
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-version: ${{ steps.gradle-version.outputs.gradle_version }}
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            wrapper
            toolchains

      - name: 'Execute Gradle build'
        run: gradle --no-daemon --build-cache assemble testClasses aggregateJavadoc publishToStagingDirectory
        id: compile

      # Upload build artifacts for other jobs to use
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/build/libs/*.jar
            **/build/classes/
            **/build/classes/java/test/
            **/build/classes/kotlin/test/
            build/gradle-version/version.txt
          path-root: ${{ github.workspace }}
          if-no-files-found: error

      # Upload staging directory
      - name: 'Upload staging directory'
        uses: actions/upload-artifact@v4
        with:
          name: staging-deploy
          path: build/staging-deploy
          if-no-files-found: error

      # Upload Javadoc
      - name: 'Upload Javadoc'
        uses: actions/upload-artifact@v4
        with:
          name: javadoc
          path: build/docs/javadoc
          if-no-files-found: error

  test-linux:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Setup JDK 25 + JavaFX
      - name: 'Set up JDK 25 with JavaFX'
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: '25'
          java-package: 'jdk+fx'
          cache: 'gradle'

      # Download build artifacts first to get the Gradle version file
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts
          path: ${{ github.workspace }}

      # Read Gradle version from the file created in the build job
      - name: 'Read Gradle Version'
        id: gradle-version
        run: |
          GRADLE_VERSION=$(cat build/gradle-version/version.txt)
          echo "Detected Gradle version: $GRADLE_VERSION"
          echo "gradle_version=$GRADLE_VERSION" >> "$GITHUB_OUTPUT"

      - name: 'Setup Gradle'
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-version: ${{ steps.gradle-version.outputs.gradle_version }}
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            wrapper
            toolchains

      - name: Start xvfb
        run: Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Run tests
        run: gradle --no-daemon --build-cache test testCodeCoverageReport
        env:
          DISPLAY: ":99"

      # Upload coverage reports
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            **/build/reports/jacoco/test/jacocoTestReport.xml
            **/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml
          if-no-files-found: warn

  test-windows:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Setup JDK 25 with JavaFX
      - name: 'Set up JDK 25 with JavaFX'
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: '25'
          java-package: 'jdk+fx'
          cache: 'gradle'

      # Download build artifacts first to get the Gradle version file
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts
          path: ${{ github.workspace }}

      # Read Gradle version from the file created in the build job
      - name: 'Read Gradle Version'
        id: gradle-version
        shell: bash
        run: |
          GRADLE_VERSION=$(cat build/gradle-version/version.txt)
          echo "Detected Gradle version: $GRADLE_VERSION"
          echo "gradle_version=$GRADLE_VERSION" >> "$GITHUB_OUTPUT"

      - name: 'Setup Gradle'
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-version: ${{ steps.gradle-version.outputs.gradle_version }}
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            wrapper
            toolchains

      - name: Run tests
        run: gradle --no-daemon --build-cache test

  sonar:
    needs: test-linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Setup JDK 25 with JavaFX
      - name: 'Set up JDK 25 with JavaFX'
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: '25'
          java-package: 'jdk+fx'
          cache: 'gradle'

      # Download build artifacts first to get the Gradle version file
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts
          path: ${{ github.workspace }}

      # Read Gradle version from the file created in the build job
      - name: 'Read Gradle Version'
        id: gradle-version
        run: |
          GRADLE_VERSION=$(cat build/gradle-version/version.txt)
          echo "Detected Gradle version: $GRADLE_VERSION"
          echo "gradle_version=$GRADLE_VERSION" >> "$GITHUB_OUTPUT"

      - name: 'Setup Gradle'
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-version: ${{ steps.gradle-version.outputs.gradle_version }}
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            wrapper
            toolchains

      # Download coverage reports
      - name: Download coverage reports
        uses: actions/download-artifact@v5
        with:
          name: coverage-reports

      - name: 'Cache SonarCloud packages'
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: 'Sonar Scan'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: >
          gradle --no-daemon --no-build-cache --no-configuration-cache --no-parallel sonar
          -Dsonar.projectKey=xzel23_meja
          -Dsonar.organization=xzel23
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.coverage.jacoco.xmlReportPaths=**/build/reports/jacoco/test/jacocoTestReport.xml

  qodana:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Setup JDK 25 with JavaFX
      - name: 'Set up JDK 25 with JavaFX'
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: '25'
          java-package: 'jdk+fx'
          cache: 'gradle'

      # Download build artifacts first to get the Gradle version file
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts
          path: ${{ github.workspace }}

      # Read Gradle version from the file created in the build job
      - name: 'Read Gradle Version'
        id: gradle-version
        run: |
          GRADLE_VERSION=$(cat build/gradle-version/version.txt)
          echo "Detected Gradle version: $GRADLE_VERSION"
          echo "gradle_version=$GRADLE_VERSION" >> "$GITHUB_OUTPUT"

      - name: 'Setup Gradle'
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-version: ${{ steps.gradle-version.outputs.gradle_version }}
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            wrapper
            toolchains

      - name: 'Create Qodana config'
        run: |
          cat > qodana.yaml << 'EOF'
          version: "1.0"
          linter: jetbrains/qodana-jvm-community:2025.2
          profile:
            name: qodana.starter
          exclude:
            - name: All
              paths:
                - "**/jmh/**"
          EOF

      - name: 'Qodana Scan'
        uses: JetBrains/qodana-action@v2025.2
        with:
          args: --property,idea.kotlin.plugin.use.k2=false
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}

  publish:
    needs: [test-linux, test-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Setup JDK 21 for publishing
      - name: 'Set up JDK 21'
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      # Download build artifacts first to get the Gradle version file
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts
          path: ${{ github.workspace }}

      # Read Gradle version from the file created in the build job
      - name: 'Read Gradle Version'
        id: gradle-version
        run: |
          GRADLE_VERSION=$(cat build/gradle-version/version.txt)
          echo "Detected Gradle version: $GRADLE_VERSION"
          echo "gradle_version=$GRADLE_VERSION" >> "$GITHUB_OUTPUT"

      - name: 'Setup Gradle'
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-version: ${{ steps.gradle-version.outputs.gradle_version }}
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            wrapper
            toolchains

      # Download staging directory
      - name: Download staging directory
        uses: actions/download-artifact@v5
        with:
          name: staging-deploy
          path: build/staging-deploy

      # Download Javadoc
      - name: Download Javadoc
        uses: actions/download-artifact@v5
        with:
          name: javadoc
          path: build/docs/javadoc

      - name: 'publish build'
        run: gradle --no-daemon --build-cache --no-configuration-cache jreleaserDeploy jreleaserUpload
        env:
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

      - name: 'Get project version'
        id: version
        run: |
          VERSION=$(gradle --no-daemon --build-cache -q printVersion | tail -n 1)
          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: 'Determine Javadoc folder'
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Evaluating DOC_PATH for version: $VERSION"
          if [[ "$VERSION" == *"-SNAPSHOT" ]]; then
            echo "DOC_PATH=snapshots" >> "$GITHUB_ENV"
          elif [[ "$VERSION" == v* ]]; then
            echo "DOC_PATH=$VERSION" >> "$GITHUB_ENV"
          else
            echo "DOC_PATH=latest" >> "$GITHUB_ENV"
          fi

      - name: 'Deploy versioned Javadoc'
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs/javadoc
          destination_dir: ${{ env.DOC_PATH }}
          keep_files: true