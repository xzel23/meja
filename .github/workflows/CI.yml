name: CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-analyze:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Cache JDKs'
        if: runner.os == 'Linux'
        id: cache-jdks
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.os == 'Linux' && '/usr/lib/jvm/bellsoft-java21-full-amd64' || 'C:\Program Files\BellSoft\LibericaJDK-21' }}
          key: ${{ runner.os }}-liberica-jdk-21-${{ hashFiles('.github/workflows/CI.yml') }}

      - name: 'Set up JDK 21'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: 'Cache Maven packages'
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Setup Gradle'
        uses: gradle/actions/setup-gradle@v3

      - name: 'Execute Gradle build'
        run: ./gradlew build testCodeCoverageReport
        id: compile
        continue-on-error: false

      - name: 'publish build'
        if: runner.os == 'Linux' && success()
        run: ./gradlew --no-daemon --build-cache --no-configuration-cache jreleaserDeploy
        env:
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

      - name: 'Upload test artifacts from all modules'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: |
            **/build/test-artifacts/**
            **/build/jreleaser/output.properties
            **/build/jreleaser/trace.log
          if-no-files-found: ignore

      - name: 'Create Qodana config'
        if: runner.os == 'Linux'
        run: |
          cat > qodana.yaml << 'EOF'
          version: "1.0"
          linter: jetbrains/qodana-jvm-community:2025.1
          profile:
            name: qodana.starter
          exclude:
            - name: All
              paths:
                - "**/jmh/**"
          EOF

      - name: 'Qodana Scan'
        if: runner.os == 'Linux'
        uses: JetBrains/qodana-action@v2025.1.1
        with:
          args: --property,idea.kotlin.plugin.use.k2=false
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}

      - name: 'Cache SonarCloud packages'
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: 'Sonar Scan'
        if: runner.os == 'Linux'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: >
          ./gradlew --no-daemon --build-cache --no-parallel sonar
          -Dsonar.projectKey=xzel23_meja
          -Dsonar.organization=xzel23
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.coverage.jacoco.xmlReportPaths=**/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml
